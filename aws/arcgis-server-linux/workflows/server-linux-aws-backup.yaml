name: server-linux-aws-backup

on: 
  workflow_dispatch:
  # schedule:
  #   - cron: '0 0 * * *'
      
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_BACKEND_S3_BUCKET: ${{ vars.TERRAFORM_BACKEND_S3_BUCKET }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  CONFIG_FILE: ${{ github.workspace }}/config/aws/arcgis-server-linux/backup.tfvars.json

concurrency:
  group: ${{ github.ref_name }}

jobs:
  backup:
    name: Create Backup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: aws/arcgis-server-linux/backup
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}
    - name: Install Boto3 and Ansible
      id: install-boto3
      run: |
        pip install boto3
        pip install ansible-core==2.16.7 ansible==9.6.0
    - name: Install Ansible Collections
      id: install-collections
      run: ansible-galaxy collection install ${{ github.workspace }}/ansible_collections/arcgis -p /usr/share/ansible/collections
    - name: Run Terraform
      id: terraform
      run: |
        SITE_ID=$(jq -r '.site_id' $CONFIG_FILE)
        DEPLOYMENT_ID=$(jq -r '.deployment_id' $CONFIG_FILE)
        terraform init -backend-config="bucket=$TERRAFORM_BACKEND_S3_BUCKET" -backend-config="key=$SITE_ID/aws/$DEPLOYMENT_ID/backup.tfstate" -backend-config="region=$AWS_DEFAULT_REGION"
        terraform apply -var-file $CONFIG_FILE -auto-approve
