# Copyright 2024 Esri
#
# Licensed under the Apache License Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: site-k8s-cluster-aws

on: 
  workflow_dispatch:
    inputs:
      terraform_command:
        description: 'Terraform Command'
        type: choice
        options:
        - apply
        - plan

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_aws_region: ${{ vars.AWS_DEFAULT_REGION }}
  TERRAFORM_BACKEND_S3_BUCKET: ${{ vars.TERRAFORM_BACKEND_S3_BUCKET }}
  CONTAINER_REGISTRY_USER: ${{ secrets.CONTAINER_REGISTRY_USER }}
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
  CONFIG_FILE: ${{ github.workspace }}/config/aws/arcgis-site-core/k8s-cluster.tfvars.json

concurrency:
  group: ${{ github.ref_name }}
  
jobs:
  k8s-cluster:
    name: Create K8s cluster
    runs-on: ubuntu-22.04
    outputs:
      cluster_name: ${{ steps.output.outputs.cluster_name }}
      cluster_endpoint: ${{ steps.output.outputs.cluster_endpoint }}
    defaults:
      run:
        working-directory: aws/arcgis-site-core/k8s-cluster
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}
    - name: Terraform Init
      id: init
      run: |
        SITE_ID=$(jq -r '.site_id' $CONFIG_FILE)
        terraform init -backend-config="bucket=$TERRAFORM_BACKEND_S3_BUCKET" -backend-config="key=$SITE_ID/aws/k8s-cluster.tfstate" -backend-config="region=$TF_VAR_aws_region" 
    - name: Terraform Plan
      id: plan
      if: github.event.inputs.terraform_command == 'plan'
      run: terraform plan -var-file $CONFIG_FILE
    - name: Terraform Apply
      id: apply
      if: github.event.inputs.terraform_command == 'apply'
      run: terraform apply -var-file $CONFIG_FILE -var=container_registry_user=$CONTAINER_REGISTRY_USER -var=container_registry_password=$CONTAINER_REGISTRY_PASSWORD -auto-approve
    - name: Test EKS cluster access
      id: test
      if: github.event.inputs.terraform_command == 'apply'      
      run: |
        echo "Test"
        SITE_ID=$(jq -r '.site_id' $CONFIG_FILE)
        AWS_REGION=$(jq -r '.aws_region' $CONFIG_FILE)
         [[ "$AWS_REGION" == "null" || "$AWS_REGION" == "" ]] && AWS_REGION=$TF_VAR_aws_region
        aws eks update-kubeconfig --region $AWS_REGION --name $SITE_ID
        kubectl get nodes
    - name: Terraform Output
      id: output
      run: |
        echo cluster_name=$(terraform output cluster_name) >> $GITHUB_OUTPUT
        echo cluster_endpoint=$(terraform output cluster_endpoint) >> $GITHUB_OUTPUT
  