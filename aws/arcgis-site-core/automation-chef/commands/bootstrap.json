{
  "schemaVersion": "2.2",
  "description": "Installs Chef/Cinc Client and Chef Cookbooks for ArcGIS on EC2 instances",
  "parameters": {
    "ChefCookbooksUrl": {
      "type": "String",
      "description": "(Optional) Chef cookbooks archive URL",
      "default": "{{ssm:/arcgis/arcgis-enterprise/cookbooks-url}}"
    },
    "ChefClientUrl": {
      "type": "String",
      "description": "(Optional) Chef Client package URL",
      "default": "{{ssm:/arcgis/arcgis-enterprise/chef-client-url/windows2022}}"
    },
    "ExecutionTimeout": {
      "type": "String",
      "description": "(Optional) Execution timeout in seconds",
      "default": "3600"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "BootstrapLinuxInstance",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "",
          "set -e",
          "",
          "function die() {",
          "  echo \"$@\" >&2",
          "  exit 1",
          "}",
          "",
          "function get_contents() {",
          "  url=$1",
          "  path=$2",
          "  if [[ $url =~ ^s3:// ]]; then",
          "    aws s3 cp $url $path --no-progress",
          "  else",
          "    if [ -x \"$(which curl)\" ]; then",
          "      curl -s -f $url -o $path",
          "    elif [ -x \"$(which wget)\" ]; then",
          "      wget $url -O $path",
          "    else",
          "      die \"No download utility (curl, wget)\"",
          "    fi",
          "  fi",
          "}",
          "",
          "function exec_cmd() {",
          "  echo \"Invoking $@\"",
          "  eval \"$@\"",
          "  if [ $? -ne 0 ]; then",
          "    die \"\"",
          "  fi",
          "}",
          "",
          "function update_cookbook() {",
          "  cookbooks_url=\"{{ChefCookbooksUrl}}\"",
          "  echo \"Downloading Chef Cookbooks for ArcGIS from $cookbooks_url\"",
          "  get_contents $cookbooks_url \"/tmp/cookbook.tar.gz\"",
          "  exec_cmd \"sudo mkdir -p /var/chef\"",          
          "  echo \"Extracting cookbooks from the archive...\"",          
          "  exec_cmd \"sudo tar -xf /tmp/cookbook.tar.gz -C /var/chef\"",
          "  exec_cmd \"sudo rm /tmp/cookbook.tar.gz\"",
          "}",
          "",
          "function update_chefclient() {",
          "  chef_client_url={{ChefClientUrl}}",
          "  filename=$(basename $chef_client_url)",
          "  echo \"Downloading Chef/Cinc client from $chef_client_url...\"",
          "  get_contents $chef_client_url /tmp/$filename",
          "  echo \"Installing Chef/Cinc client...\"",
          "  extension=\"${filename##*.}\"",
          "  if [ \"$extension\" == \"deb\" ]; then",
          "    exec_cmd \"sudo dpkg -i /tmp/$filename\"",
          "  elif [ \"$extension\" == \"rpm\" ]; then",         
          "    exec_cmd \"sudo rpm -i --force /tmp/$filename\"", 
          "  else",
          "    die \"Unsupported package type.\"",
          "  fi",
          "  rm /tmp/$filename",
          "}",
          "",
          "function is_debian() {",
          "  grep -E -i -c 'Debian|Ubuntu' /etc/issue 2>&1 &>/dev/null",
          "  [ $? -eq 0 ] && echo \"true\" || echo \"false\"",
          "}",
          "",
          "function is_redhat() {",
          "  if [ -f \"/etc/system-release\" ] || [ -f \"/etc/redhat-release\" ]; then",
          "    echo \"true\"",
          "  else",
          "    echo \"false\"",
          "  fi",
          "}",
          "",
          "function is_suse() {",
          "  if type zypper > /dev/null; then",
          "    echo \"true\"",
          "  else",
          "    echo \"false\"",
          "  fi",
          "}",
          "",
          "function get_dist() {",
          "  if [ \"$(is_debian)\" == \"true\" ]; then",
          "    echo \"debian\"",
          "  elif [ \"$(is_redhat)\" == \"true\" ]; then",
          "    echo \"redhat\"",
          "  elif [ \"$(is_suse)\" == \"true\" ]; then",
          "    echo \"suse\"",
          "  else",
          "    die \"Unknown distribution\"",
          "  fi",
          "}",
          "",
          "function main() {",
          "  update_chefclient",
          "  update_cookbook",
          "  echo \"Bootstrapping completed.\"",          
          "  exit 0",
          "}",
          "",
          "main \"$@\""
        ],
        "timeoutSeconds": "{{ExecutionTimeout}}"
      }
    },
    {
      "action": "aws:runPowerShellScript",
      "name": "BootstrapWindowsInstance",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },      
      "inputs": {
        "runCommand": [
          "try",
          "{",
          "  $Env:Path += [System.Environment]::GetEnvironmentVariable('Path','Machine')",
          "  $tempfolderpath = (Join-Path $env:TEMP 'esri')",          
          "  if (-not (Test-Path -Path $tempfolderpath)) {",
          "     New-Item -ItemType Directory -Path $tempfolderpath",
          "  }",
          "  $chefClientUrl = '{{ChefClientUrl}}'",
          "  $chefClientMsi = (Join-Path $tempfolderpath 'chef-client.msi')",
          "  Write-Output \"Downloading Chef/Cinc client from $chefClientUrl...\"",
          "  if ($chefClientUrl.StartsWith('s3://', 'CurrentCultureIgnoreCase')) {",
          "    Start-Process -Wait -FilePath aws.exe -ArgumentList \"s3 cp $chefClientUrl $chefClientMsi\"",
          "  } else {",
          "    Invoke-WebRequest -Uri $chefClientUrl -OutFile $chefClientMsi",          
          "  }",
          "  Write-Output \"Installing Chef/Cinc client...\"",
          "  Start-Process -Wait -FilePath msiexec.exe -ArgumentList \"/I $chefClientMsi /qb\"",
          "  $chefworkspacepath = (Join-Path $env:SystemDrive 'chef')",
          "  if (-not (Test-Path -Path $chefworkspacepath)) {",
          "     New-Item -ItemType Directory -Path $chefworkspacepath",
          "  }",
          "  Remove-Item (Join-Path $env:SystemDrive 'cinc') -Recurse -ErrorAction SilentlyContinue",
          "  $cookbooksUrl = '{{ChefCookbooksUrl}}'",
          "  $cookbooks = (Join-Path $tempfolderpath 'cookbooks.tar.gz')",          
          "  Write-Output \"Downloading Chef Cookbooks for ArcGIS from $cookbooksUrl...\"",
          "  if ($cookbooksUrl.StartsWith('s3://', 'CurrentCultureIgnoreCase')) {",
          "    Start-Process -Wait -FilePath aws.exe -ArgumentList \"s3 cp $cookbooksUrl $cookbooks\"",
          "  } else {",
          "    Invoke-WebRequest -Uri $cookbooksUrl -OutFile $cookbooks",
          "  }",          
          "  Write-Output \"Extracting cookbooks from the archive...\"",
          "  Start-Process -Wait -FilePath tar.exe -ArgumentList \"-C $chefworkspacepath -xvzf $cookbooks\"",
          "  Remove-Item $cookbooks",
          "  Write-Output \"Bootstrapping completed.\"",
          "} catch {",
          "  Write-Error $_.Exception | format-list -force",
          "  Write-Error 'Error occurred while bootstrapping Windows instance.' -ErrorAction Stop",
          "}"
        ],
        "timeoutSeconds": "{{ExecutionTimeout}}"
      }
    }    
  ]
}