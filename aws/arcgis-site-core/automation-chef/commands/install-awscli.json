{
  "schemaVersion": "2.2",
  "description": "Installs AWS CLI on EC2 instances",
  "parameters": {
    "ExecutionTimeout": {
      "type": "String",
      "description": "(Optional) Execution timeout in seconds",
      "default": "3600"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "InstallAwsCliLinux",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Linux"
        ]
      },
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "",
          "set -e",
          "",
          "function die() {",
          "  echo \"$@\" >&2",
          "  exit 1",
          "}",
          "",
          "function get_contents() {",
          "  url=$1",
          "  path=$2",
          "  if [[ $url =~ ^s3:// ]]; then",
          "    aws s3 cp $url $path --no-progress",
          "  else",
          "    if [ -x \"$(which curl)\" ]; then",
          "      curl -s -f $url -o $path",
          "    elif [ -x \"$(which wget)\" ]; then",
          "      wget $url -O $path",
          "    else",
          "      die \"No download utility (curl, wget)\"",
          "    fi",
          "  fi",
          "}",
          "",
          "function exec_cmd() {",
          "  echo \"Invoking $@\"",
          "  eval \"$@\"",
          "  if [ $? -ne 0 ]; then",
          "    die \"\"",
          "  fi",
          "}",
          "",
          "function apt_get_update() {",
          "  dpkg_flags=\"-o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold\"",
          "  apt_noninteractive_cmd=\"DEBIAN_FRONTEND=noninteractive apt-get $dpkg_flags\"",
          "  exec_cmd \"sudo apt-get clean\"",
          "  exec_cmd \"sudo apt-get update\"",
          "",
          "  if [ ! -z \"$MANDATORY_PACKAGES\" ]; then",
          "    for package in $MANDATORY_PACKAGES; do",
          "      exec_cmd \"sudo $apt_noninteractive_cmd -y install $package\"",
          "    done  ",
          "  fi",
          "}",
          "",
          "function yum_upgrade() {",
          "  exec_cmd 'sudo yum clean all'",
          "  yum_cmd='sudo yum -y upgrade'",
          "  exec_cmd \"$yum_cmd\"",
          "  yum_cmd='sudo yum -y install'",
          "  if [ ! -z \"$MANDATORY_PACKAGES\" ]; then",
          "    yum_cmd=\"$yum_cmd $MANDATORY_PACKAGES\"",
          "  fi",
          "  exec_cmd \"$yum_cmd\"",
          "}",
          "",
          "function zypper_upgrade() {",
          "  exec_cmd 'sudo zypper clean'",
          "  zypper_cmd='sudo zypper update -y'",
          "  exec_cmd \"$zypper_cmd\"",
          "  zypper_cmd='sudo zypper install -y'",
          "  if [ ! -z \"$MANDATORY_PACKAGES\" ]; then",
          "    for package in $MANDATORY_PACKAGES; do",
          "      exec_cmd \"sudo zypper install -y $package\"",
          "    done  ",
          "  fi",
          "}",
          "",
          "function update_packages() {",
          "  if [ \"$(get_dist)\" == \"debian\" ]; then",
          "    apt_get_update",
          "  elif [ \"$(get_dist)\" == \"redhat\" ]; then",
          "    yum_upgrade",
          "  else",
          "    zypper_upgrade",
          "  fi",
          "}",
          "",
          "function install_cli() {",
          "  get_contents \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" \"awscliv2.zip\"",
          "  exec_cmd \"unzip -q -o awscliv2.zip\"",
          "  exec_cmd \"sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli\"",
          "  exec_cmd \"sudo rm awscliv2.zip\"",
          "}",
          "",
          "function update_cli() {",
          "  if [ -x \"$(which pip 2>/dev/null)\" ]; then",
          "    exec_cmd \"pip install --upgrade awscli\"",
          "  elif [ -x \"$(which aws 2>/dev/null)\" ]; then",
          "    echo \"AWS CLI Exists\"",
          "  else",
          "    install_cli",
          "  fi",
          "}",
          "",
          "function is_debian() {",
          "  grep -E -i -c 'Debian|Ubuntu' /etc/issue 2>&1 &>/dev/null",
          "  [ $? -eq 0 ] && echo \"true\" || echo \"false\"",
          "}",
          "",
          "function is_redhat() {",
          "  if [ -f \"/etc/system-release\" ] || [ -f \"/etc/redhat-release\" ]; then",
          "    echo \"true\"",
          "  else",
          "    echo \"false\"",
          "  fi",
          "}",
          "",
          "function is_suse() {",
          "  if type zypper > /dev/null; then",
          "    echo \"true\"",
          "  else",
          "    echo \"false\"",
          "  fi",
          "}",
          "",
          "function get_dist() {",
          "  if [ \"$(is_debian)\" == \"true\" ]; then",
          "    echo \"debian\"",
          "  elif [ \"$(is_redhat)\" == \"true\" ]; then",
          "    echo \"redhat\"",
          "  elif [ \"$(is_suse)\" == \"true\" ]; then",
          "    echo \"suse\"",
          "  else",
          "    die \"Unknown distribution\"",
          "  fi",
          "}",
          "",
          "function echo_options() {",
          "  echo \"MANDATORY_PACKAGES\" == \"$MANDATORY_PACKAGES\"",
          "}",
          "",
          "function sanitize_inputs() {",
          "  value=\"$(echo $@ | sed 's/,/ /g' | xargs | xargs)\"",
          "  if [ ! -z \"$value\" ] && [ \"$value\" != \"none\" ] && [ \"$value\" != \"all\" ]; then",
          "    echo \"$value\"",
          "  fi",
          "}",
          "",
          "function main() {",
          "  MANDATORY_PACKAGES=\"$(sanitize_inputs unzip tar)\"",
          "  echo_options",
          "  update_packages",
          "  update_cli",
          "  /usr/sbin/aws --version",
          "  exit 0",
          "}",
          "",
          "main \"$@\""
        ],
        "timeoutSeconds": "{{ExecutionTimeout}}"
      }
    },
    {
      "action": "aws:runPowerShellScript",
      "name": "InstallAwsCliWindows",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },      
      "inputs": {
        "runCommand": [
          "try",
          "{",
          "  Start-Process -Wait -FilePath msiexec.exe -ArgumentList \"/I https://awscli.amazonaws.com/AWSCLIV2.msi /qb\"",
          "} catch {",
          "  Write-Error $_.Exception | format-list -force",
          "  exit 1",
          "}"
        ],
        "timeoutSeconds": "{{ExecutionTimeout}}"
      }
    }    
  ]
}