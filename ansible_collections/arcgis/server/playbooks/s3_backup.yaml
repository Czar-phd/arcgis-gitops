---
# This playbook creates a backup of ArcGIS Server site configuration by
# running 'backup' admin utility and copies the backup to S3 bucket.
# If the S3 bucket has more than max_backups objects with given prefix,
# the playbook also deletes the oldest backup from the S3 bucket.

- name: Backup ArcGIS Server site
  hosts: all
  become: true
  become_user: '{{ run_as_user }}'
  vars:
    run_as_user: 'arcgis'
    install_dir: '/opt'
    server_url: 'https://localhost:6443/arcgis'
    backup_dir: '/tmp'
    s3_prefix: 'arcgis-server-backups'
    max_backups: 100
  tasks:
    - name: List backups in S3 bucket
      amazon.aws.s3_object:
        bucket: '{{ s3_bucket }}'
        region: '{{ s3_region }}'        
        prefix: '{{ s3_prefix }}'
        mode: list
      register: backups
    - name: Delete old backups
      amazon.aws.s3_object:
        bucket: '{{ s3_bucket }}'
        region: '{{ s3_region }}'
        prefix: '{{ s3_prefix }}'
        object: '{{ backups.s3_keys[0] }}'
        mode: delobj
      when: backups.s3_keys | length > max_backups
    - name: Run backup utility
      vars:
        ansible_aws_ssm_timeout: 600
      ansible.builtin.command:
        argv:
          - '{{ install_dir }}/arcgis/server/tools/admin/backup'
          - '-u'
          - '{{ admin_username }}'
          - '-p'
          - '{{ admin_password }}'
          - '-f'
          - '{{ backup_dir }}'
          - '-s'
          - '{{ server_url }}'
          - '--ignoressl'
      register: backup
      changed_when: backup.rc == 0
    - name: Find backup files
      ansible.builtin.find:
        paths: '{{ backup_dir }}'
        patterns: '*.agssite'
      register: backup_files
    - name: The latest backup file path
      ansible.builtin.set_fact:
        backup_file_path: "{{ (backup_files.files | sort(attribute='mtime', reverse=true) | first).path }}"
    - name: Copy the last backup file to S3 bucket
      amazon.aws.s3_object:
        bucket: '{{ s3_bucket }}'
        region: '{{ s3_region }}'
        object: '{{ s3_prefix }}/{{ backup_file_path | basename }}'
        src: '{{ backup_file_path }}'
        mode: put
    - name: Delete the temp backup file
      ansible.builtin.file:
        path: '{{ backup_file_path }}'
        state: absent
